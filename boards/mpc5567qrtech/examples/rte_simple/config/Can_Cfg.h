/*
* Configuration of module: Can (Can_Cfg.h)
*
* Created by:              
* Copyright:               
*
* Configured for (MCU):    MPC5567
*
* Module vendor:           ArcCore
* Generator version:       2.0.4
*
* Generated by Arctic Studio (http://arccore.com) 
*/


#if !(((CAN_SW_MAJOR_VERSION == 1) && (CAN_SW_MINOR_VERSION == 0)) )
#error Can: Configuration file expected BSW module version to be 1.0.*
#endif

	

#ifndef CAN_CFG_H_
#define CAN_CFG_H_

// Number of controller configs
#define CAN_ARC_CTRL_CONFIG_CNT		1

#define CAN_DEV_ERROR_DETECT			STD_OFF
#define CAN_VERSION_INFO_API			STD_OFF
#define CAN_MULTIPLEXED_TRANSMISSION	STD_OFF  // Not supported
#define CAN_WAKEUP_SUPPORT				STD_OFF  // Not supported
#define CAN_HW_TRANSMIT_CANCELLATION	STD_OFF  // Not supported

typedef enum {
	FLEXCAN_A = 0,
	CAN_CTRL_A = 0,
	FLEXCAN_B = 1,
	CAN_CTRL_B = 1,
	FLEXCAN_C = 2,
	CAN_CTRL_C = 2,
	FLEXCAN_D = 3,
	CAN_CTRL_D = 3,
	FLEXCAN_E = 4,
	CAN_CTRL_E = 4,
}CanControllerIdType;

typedef enum {
	CAN_OBJECT_TYPE_RECEIVE,
	CAN_OBJECT_TYPE_TRANSMIT
} Can_ObjectTypeType;


typedef enum {
	HWObj_2,
	NUM_OF_HTHS
} Can_Arc_HTHType;


typedef enum {
	HWObj_1,
	NUM_OF_HRHS
} Can_Arc_HRHType;


typedef struct {
	//	Specifies the InstanceId of this module instance. If only one instance is
	//	present it shall have the Id 0
	uint8 CanIndex;
} Can_GeneralType;

// Start mc9s12 unique
typedef enum {
  CAN_ARC_IDAM_2_32BIT,
  CAN_ARC_IDAM_4_16BIT,
  CAN_ARC_IDAM_8_8BIT,
  CAN_ARC_IDAM_FILTER_CLOSED,
} Can_Arc_IDAMType;

typedef uint32 Can_FilterMaskType;

typedef enum {
	CAN_ARC_PROCESS_TYPE_INTERRUPT,
	CAN_ARC_PROCESS_TYPE_POLLING
} Can_Arc_ProcessType;

struct Can_ControllerConfig;
struct Can_Callback;

typedef struct {
	const struct Can_ControllerConfig *CanController;
	
	// Callbacks( Extension )
	const struct Can_Callback *CanCallbacks;	
	const  uint8 * const ArcHthToUnit;
	const  uint8 * const ArcHthToHoh;
	const  uint8 * const ArcCtrlToUnit;
} Can_ConfigSetType;


typedef struct {
	// This is the multiple configuration set container for CAN Driver
	// Multiplicity 1..*
	const Can_ConfigSetType	 *CanConfigSet;
	// This container contains the parameters related each CAN
	// Driver Unit.
	// Multiplicity 1..*
	const Can_GeneralType	 *CanGeneral;
	
} Can_ConfigType;

extern const Can_ConfigType CanConfigData;
extern const Can_ConfigSetType Can_ConfigSet;

#endif /*CAN_CFG_H_*/
