/* -------------------------------- Arctic Core ------------------------------
 * Arctic Core - the open source AUTOSAR platform http://arccore.com
 *
 * Copyright (C) 2009  ArcCore AB <contact@arccore.com>
 *
 * This source code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation; See <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 * -------------------------------- Arctic Core ------------------------------*/
 
 
/* ----------------------------[information]----------------------------------*/
/*
 * Author: mahi
 *
 * Description:
 *   Implements exceptions handlers and sleep handling for some MCUs 
 *   (mpc5516 and mpc5668). 
 *
 * Implementaion notes:
 *   The sleep handling on old MCUs differ a lot from the new generation.
 *   
 *   Old:
 *   - mpc551,  mpc5668 
 *   - returns to a user defined address in flash or ram with one TLB 4K setup.
 *   - STOP and SLEEP (SLEEP deeper sleep than STOP)
 * 
 *   New:
 *    - mpc560x series.
 *    - Resources: AN4240 and "Bolero Low Power Approach"
 *    - 3  low power modes: HALT, STOP and STANDBY.
 *      - HALT -  Pointless
 *      - STOP -  middle sleep  
 *      - STANDBY - Deepest sleep (Suppot this)
 *    - It seems that after STANDBY is either boots to  
 *      - Flash (normal reset vector!!!)
 *      - backup SRAM   
 */

/* ----------------------------[includes]------------------------------------*/
#define _ASSEMBLER_
#include "asm_ppc.h"
#include "arch_offset.h"
#include "asm_offset.h"
#include "arch_stack.h"
#include "Mcu_Arc_Cfg.h"
#include "mm.h"

/* ----------------------------[private define]------------------------------*/

#define SAVE_VOLATILE() 	\
	stwu	sp,-VOLATILE_FRM_SIZE(sp); \
	stw		r0,  VOLATILE_FRM_R0(sp);  \
	stw		r3,  VOLATILE_FRM_R3(sp);  \
	stw		r4,  VOLATILE_FRM_R4(sp);  \
	stw		r5,  VOLATILE_FRM_R5(sp);  \
	stw		r6,  VOLATILE_FRM_R6(sp);  \
	stw		r7,  VOLATILE_FRM_R7(sp);  \
	stw		r8,  VOLATILE_FRM_R8(sp);  \
	stw		r9,  VOLATILE_FRM_R9(sp);  \
	stw		r10, VOLATILE_FRM_R10(sp); \
	stw		r11, VOLATILE_FRM_R11(sp); \
	stw		r12, VOLATILE_FRM_R12(sp); \
	mfcr 	r3;                        \
	stw 	r3, VOLATILE_FRM_CR(sp);   \
	mfxer 	r3;                        \
	stw 	r3, VOLATILE_FRM_XER(sp);  \
	mfctr 	r3;                        \
	stw 	r3, VOLATILE_FRM_CTR(sp);  \
	mflr 	r3;                        \
	stw 	r3, VOLATILE_FRM_LR(sp); 
	
#define RESTORE_VOLATILE() \
	lwz 	r3, VOLATILE_FRM_LR(sp);  	\
	mtlr 	r3; 						\
	lwz	 	r3, VOLATILE_FRM_CTR(sp);	\
	mtctr 	r3;							\
	lwz 	r3, VOLATILE_FRM_XER(sp);	\
	mtxer 	r3;							\
	lwz 	r3, VOLATILE_FRM_CR(sp);	\
	mtcr	r3;							\
	lwz		r0, VOLATILE_FRM_R0(sp);	\
	lwz		r3, VOLATILE_FRM_R3(sp);	\
	lwz		r4, VOLATILE_FRM_R4(sp);	\
	lwz		r5, VOLATILE_FRM_R5(sp);	\
	lwz		r6, VOLATILE_FRM_R6(sp);	\
	lwz		r7, VOLATILE_FRM_R7(sp);	\
	lwz		r8, VOLATILE_FRM_R8(sp);	\
	lwz		r9, VOLATILE_FRM_R9(sp);	\
	lwz		r10, VOLATILE_FRM_R10(sp);	\
	lwz		r11, VOLATILE_FRM_R11(sp);	\
	lwz		r12, VOLATILE_FRM_R12(sp);	\
	addi	sp,sp,VOLATILE_FRM_SIZE;	
	

/* ----------------------------[private macro]-------------------------------*/

#define EXC_TABLE_CODE(_exc_nr) 	\
 	.balign 16;                     \
	b		exception_IVOR ## _exc_nr 			


/* ----------------------------[private typedef]-----------------------------*/
/* ----------------------------[private function prototypes]-----------------*/
.global exception_IVOR0
.global exception_IVOR1
.global exception_IVOR2
.global exception_IVOR3
.extern exception_IVOR4
.global exception_IVOR5
.global exception_IVOR6
.global exception_IVOR7
.global exception_IVOR8
.global exception_IVOR9
.extern exception_IVOR10
.global exception_IVOR11
.global exception_IVOR12
.global exception_IVOR13
.global exception_IVOR14
.global exception_IVOR15
.global exception_IVOR32
.global exception_IVOR33
.global exception_IVOR34

.extern Mpc5xxx_Exception_IVOR0
.extern Mpc5xxx_Exception_IVOR1
.extern Mpc5xxx_Exception_IVOR2
.extern Mpc5xxx_Exception_IVOR3
//.extern Mpc5xxx_Exception_IVOR4
.extern Mpc5xxx_Exception_IVOR5
.extern Mpc5xxx_Exception_IVOR6
.extern Mpc5xxx_Exception_IVOR7
.extern Mpc5xxx_Exception_IVOR8
.extern Mpc5xxx_Exception_IVOR9
//.extern Mpc5xxx_Exception_IVOR10
.extern Mpc5xxx_Exception_IVOR11
.extern Mpc5xxx_Exception_IVOR12
.extern Mpc5xxx_Exception_IVOR13
.extern Mpc5xxx_Exception_IVOR14
.extern Mpc5xxx_Exception_IVOR32
.extern Mpc5xxx_Exception_IVOR33
.extern Mpc5xxx_Exception_IVOR34

.extern MM_TlbSetupOne
.extern Mcu_Arc_InitMM


/* ----------------------------[private variables]---------------------------*/
/* ----------------------------[private functions]---------------------------*/
/* ----------------------------[public functions]----------------------------*/

/* Sanity check */
#if defined(CFG_MCU_ARC_CONFIG) && !defined(CFG_MCU_ARC_LP)
#error You must define CFG_MCU_ARC_LP if you defined CFG_MCU_ARC_CONFIG
#endif


#if defined(CFG_MCU_ARC_LP)

ASM_SECTION_TEXT(.text)

#if defined(CFG_MPC5516) || defined(CFG_MPC5668) 
#define CRP_RECPTR 		0xfffec058

	.global Mcu_Arc_EnterLowPower
	
Mcu_Arc_EnterLowPower:
	subi	r1, r1, 0x94	// Allocate space on stack 0x94 = 148 r2--r31 + 7 SPRs
	stmw	r2, 0(r1) 		// Save registers r2-r31 to stack
	mfSRR1	r25
	mfSRR0	r26
	mfLR	r27
	mfmsr	r28
	mfCR	r29
	mfXER	r30
	mfCTR	r31
	stmw	r25, 0x78(r1)	// Store SPR data to stack

	LOAD_ADDR_32(r4,CRP_RECPTR)
	stw		r1,0x0(r4)	//  Save stack pointer to CRP to be preserved during LPM
	
/* Note! You cannot step over the wait instruction with the debugger */		
	.long	0x7C00007C	//  Wait instruction
	
	blr

/*
 * Low Power Vector...needs to be on 4K + 0xffc
 * We only have 1 instruction before we are outside TLB0 so just jump
 */
ASM_SECTION_TEXT(.lowpower_vector)

	.global Mcu_Arc_LowPowerVector

Mcu_Arc_LowPowerVector:
	b	Mcu_Arc_LowPowerRecoverFlash
	

ASM_SECTION_TEXT(.lowpower_text)

	.extern EcuM_CheckWakeup
	.global Mcu_Arc_LowPowerRecoverFlash


/*
 * When we come back here only TLB0 is setup for flash and then only 4K.
 *
 * Debuggers:
 * - WinIDEA :   Hardware->Emulation Options->CPU Setup->MPC55xx->Low Power Debug
 *                 This will make the debugger stop on the function below.
 * - UDE:        No support for this yet. It just runs through the "wait" instruction.
 * - Lauterbach:  
 *
 *       
 */	
Mcu_Arc_LowPowerRecoverFlash:
  
	/* RAM */
    LOAD_ADDR_32 (r3, (0x10000000+(3<<16)))
    LOAD_ADDR_32 (r4, (0xC0000000 + MAS1_TSIZE_256K))
    LOAD_ADDR_32 (r5, (CFG_SRAM_START + VLE_MAS2_VAL + MAS2_I))
    LOAD_ADDR_32 (r6, (CFG_SRAM_START + MAS3_FULL_ACCESS))
    bl	tlbSet	
    
    /* Peripheral */ 
    LOAD_ADDR_32 (r3, (0x10000000 + (1<<16)))
    LOAD_ADDR_32 (r4, (0xC0000000 + MAS1_TSIZE_1M))
    LOAD_ADDR_32 (r5, (CFG_PERIPHERAL_START + VLE_MAS2_VAL +  MAS2_I))
    LOAD_ADDR_32 (r6, (CFG_PERIPHERAL_START + MAS3_FULL_ACCESS))
    bl	tlbSet	

    /* Flash */ 
    LOAD_ADDR_32 (r3, (0x10000000 + (0<<16)))
    LOAD_ADDR_32 (r4, (0xC0000000 + MAS1_TSIZE_4M))
    LOAD_ADDR_32 (r5, (CFG_FLASH_START + VLE_MAS2_VAL))
    LOAD_ADDR_32 (r6, (CFG_FLASH_START + MAS3_FULL_ACCESS))
    bl	tlbSet	


/* Recover the stack */
	LOAD_ADDR_32(r4,CRP_RECPTR)
	lwz	r1,0x0(r4)	    // Restore stack pointer from CRP
	
	bl  	Mcu_Arc_InitMM
	
	lmw	r25,0x78(r1)	// Load SPR values back into GPRs
	mtSRR1	r25
	mtSRR0	r26
	mtLR	r27
	mtmsr	r28
	mtCR	r29
	mtXER	r30
	mtCTR	r31		    // Load SPRs with GPR values

	mtLR	r27

	lmw	r2, 0(r1) 	    // Restore GPRs from stack
	addi	r1,r1,0x94	// Deallocate space on stack

    /* branch back to Mcu_SetMode().. */
    blr

/* r3 - MAS0 
 * r4 - MAS1
 * r5 - MAS2
 * r6 - MAS3
 */
tlbSet:
    mtspr SPR_MAS0,r3     
    mtspr SPR_MAS1,r4     
    mtspr SPR_MAS2,r5     
    mtspr SPR_MAS3,r6
    msync
    isync
	tlbwe
	isync
	blr	
	
	
#elif defined(CFG_MPC5604B)

ASM_SECTION_TEXT(.text)

.global Mcu_Arc_setjmp	
/* 
 * context r3 (must have (32+5)*4=148 in space)
 */	
Mcu_Arc_setjmp:
	stmw	r4, 8(r3) 		// Save all regs on stack, 32*4=128=0x80
	stw		r1,0(r3)
	stw		r2,4(r3)
	mfLR	r27
	mfmsr	r28
	mfCR	r29
	mfXER	r30
	mfCTR	r31
	stmw	r27, 0x80(r3)	// Store SPR data to stack
	li 		r3,0
	blr

ASM_SECTION_TEXT(.lowpower_text)

/* At this point:
 * - All CPU registers are unknown (we must init again)
 * - We come from sleep and should be in DRUN mode.
 * - We run off the FIRC (MC_ME turned off during sleep?)  
 * - We should be located at 0x4000_0000 (or "backup RAM" as the manual states)
 */
 
 	.extern context
	
/* Context is saved in context..
 * should return 1 (ie return value of setjmp())  
 */	
Mcu_Arc_BootFromRam:
	LOAD_ADDR_32(r3,context)
	lmw		r27,0x80(r3)
	mtLR	r27
	mtmsr	r28
	mtCR	r29
	mtXER	r30
	mtCTR	r31
	lmw	r4, 8(r3)
	lwz		r1, 0(r3)
	lwz		r2, 4(r3)
 	li		r3,1	/* return 1 to "setjmp" */
 	blr
		
	
#else
#error No support for this MCU
#endif
	

#endif /* defined(CFG_MCU_ARC_LP)) */


ASM_SECTION_TEXT(.text)

/* What things are we interrested in here:
 * ESR  - Exception Syndrome Regiser
 * MCSR - Machine Check Syndrome Register (Machine Check Only)
 * DEAR - Data Exception Address
 */

/* Critical Input:  CSRR0, CSRR1 */
exception_IVOR0:
	SAVE_VOLATILE()

	bl 		Mpc5xxx_Exception_IVOR0
	mtcsrr0	r3	 

	RESTORE_VOLATILE()
	rfci 


/* Machine Check:   CSRR0, CSRR1, MCSR */
exception_IVOR1:
	SAVE_VOLATILE()

	bl 		Mpc5xxx_Exception_IVOR1
	mtcsrr0	r3	 

	RESTORE_VOLATILE()
	rfci


/* Data Storage:    SRR0, SRR1, ESR, DEAR */
exception_IVOR2:
	SAVE_VOLATILE()

	bl 		Mpc5xxx_Exception_IVOR2
	mtsrr0	r3	 

	RESTORE_VOLATILE()
	rfi


/* Inst. Storage:   SRR0, SRR1, ESR */
exception_IVOR3:
	SAVE_VOLATILE()
	bl 		Mpc5xxx_Exception_IVOR3
	mtsrr0	r3	 
	RESTORE_VOLATILE()
	rfi


/* External Input */
// exception_IVOR4: /* BELONGS TO OS */

/* Alignment:       SRR0, SRR1, ESR, DEAR */
exception_IVOR5:
	SAVE_VOLATILE()
	bl 		Mpc5xxx_Exception_IVOR5
	mtsrr0	r3	 
	RESTORE_VOLATILE()
	rfi


/* Program:         SRR0, SRR1, ESR */
exception_IVOR6:
	SAVE_VOLATILE()
	bl 		Mpc5xxx_Exception_IVOR6
	mtsrr0	r3	 
	RESTORE_VOLATILE()
	rfi


/* Floating Point:  SRR0, SRR1 */
exception_IVOR7:
	SAVE_VOLATILE()
	bl 		Mpc5xxx_Exception_IVOR7
	mtsrr0	r3	 
	RESTORE_VOLATILE()
	rfi

/* System Call:     SRR0, SRR1, ESR */
exception_IVOR8:
	SAVE_VOLATILE()
	bl 		Mpc5xxx_Exception_IVOR8
	mtsrr0	r3	 
	RESTORE_VOLATILE()
	rfi

/* Aux:             Not used by e200 */
exception_IVOR9:
	rfi

/* Decrementer:     SRR0, SRR1 */
//exception_IVOR10: /* BELONGS TO OS */

/* FIT:             SRR0, SRR1 */
exception_IVOR11:
	SAVE_VOLATILE()
	bl 		Mpc5xxx_Exception_IVOR11
	mtsrr0	r3	 
	RESTORE_VOLATILE()
	rfi

/* Watchdog:        CSRR0, CSRR1 */
exception_IVOR12:
	SAVE_VOLATILE()
	bl 		Mpc5xxx_Exception_IVOR12
	mtcsrr0	r3	 
	RESTORE_VOLATILE()
	rfci

/* Data TLB:        SRR0, SRR1, ESR, DEAR */
exception_IVOR13:
	SAVE_VOLATILE()
	bl 		Mpc5xxx_Exception_IVOR13
	mtsrr0	r3	 	
	RESTORE_VOLATILE()
	rfi


/* Intstr TLB:      SRR0, SRR1, ESR */
exception_IVOR14:
	SAVE_VOLATILE()
	bl 		Mpc5xxx_Exception_IVOR14
	mtsrr0	r3	 	
	RESTORE_VOLATILE()
	rfi

/* Debug:           (C)SRR0, (C)SRR1, DBSR */
exception_IVOR15:
	b exception_IVOR15
	
	
#if defined(CFG_SPE)
/* SPE Unavailable:  SRR0, SRR1, ESR=SPE */
exception_IVOR32:
	SAVE_VOLATILE()
	bl 		Mpc5xxx_Exception_IVOR32
	mtsrr0	r3	 	
	RESTORE_VOLATILE()
	rfi

/* SPE Data:  SRR0, SRR1, ESR=SPE */
exception_IVOR33:
	SAVE_VOLATILE()
	bl 		Mpc5xxx_Exception_IVOR33
	mtsrr0	r3	 	
	RESTORE_VOLATILE()
	rfi

/* SPE round exception: SRR0, SRR1, ESR=SPE */
exception_IVOR34:
	SAVE_VOLATILE()
	bl 		Mpc5xxx_Exception_IVOR34
	mtsrr0	r3	 	
	RESTORE_VOLATILE()
	rfi
	
#endif

handleException:
	b  handleException		

ASM_SECTION_TEXT(.exception_tbl)

	
	.balign 0x1000
	.global exception_tbl

exception_tbl:
	EXC_TABLE_CODE(0)
	EXC_TABLE_CODE(1)
    EXC_TABLE_CODE(2)
    EXC_TABLE_CODE(3)
    EXC_TABLE_CODE(4)
	EXC_TABLE_CODE(5)
	EXC_TABLE_CODE(6)
	EXC_TABLE_CODE(7)
	EXC_TABLE_CODE(8)
	EXC_TABLE_CODE(9)
 	EXC_TABLE_CODE(10)
	EXC_TABLE_CODE(11)
	EXC_TABLE_CODE(12)
	EXC_TABLE_CODE(13)
	EXC_TABLE_CODE(14)
	EXC_TABLE_CODE(15)
#if defined(CFG_SPE)
	EXC_TABLE_CODE(32)
	EXC_TABLE_CODE(33)
	EXC_TABLE_CODE(34)
#endif









