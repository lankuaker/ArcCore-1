/* 
 *
 *  The Irq_IsrTypeTable does not exist any more.
 *  The Irq_VectorTable is now a pure function table (not mixed pcb and functions )
 *  The PPC interrupt handling is a bit faster.
 * 
 *
 *   New files for arch offsets? 
 *   Bypassed Irq_Entry()...
 *  TODO:
 *    Move pre/post hooks into swap code?
 *
 *
 * IMPLEMENTATION NOTES
 *  OPT: For ISR1 (interrupts always off) the there is no need to save r13-r31 since
 *  it will be saved by the C-function. 
 */
	
/*
 * Small assembler school
 *  Compare imm(32-bit)
 *   $ cmpwi rA,100
 *  Extract bits and right adjust
 *   $ extrwi rA,rS,n,b  ( n-number of bits, b- startbit )
 *  Use of @ha,@h,@l. Use @ha for arithmetic instructions to compensate for sign.
 *  To cause less confusion use load and logical instructions instead of arithmetic ones.
 *   $ lis r3,0x8000@h    
 *   $ ori r3,r3,0x08000@l
 *  is the same as 
 *   $ addis r3,0x8000@ha    
 *   $ addi r3,r3,0x08000@l
 *
 * Note!
 */


/* ----------------------------[includes]------------------------------------*/
#define _ASSEMBLER_
#include "asm_ppc.h"
#include "arch_offset.h"
#include "asm_offset.h"
#include "arch_stack.h"

// #include "asm_book_e.h"
.extern os_intc_pcb_tbl
.extern os_intc_types_tbl
.extern Os_Sys
.extern Os_ArchPanic


/* ----------------------------[private define]------------------------------*/


#define INTC_IACKR_PRC0		0xfff48010 
#define INTC_EOIR_PRC0		0xfff48018
#define INTC_IACKR			0xfff48010
#define INTC_EOIR			0xfff48018
#define INTC_SSCIR0			0xfff48020

/* ECC */
#if defined (CFG_MPC5668)
#define ECSM_BASE 	0xfff40000
#define ECSM_ESR    0x47
#endif
/* ----------------------------[private macro]-------------------------------*/

#define	LOCK()			wrteei	0
#define	UNLOCK()		wrteei	1

#if ISR_FRM_PATTERN!=FUNC_FRM_PATTERN
#error Context pattern must be in the same place
#endif

/* ----------------------------[private typedef]-----------------------------*/
/* ----------------------------[private function prototypes]-----------------*/
/* ----------------------------[private variables]---------------------------*/
/* ----------------------------[private functions]---------------------------*/
/* ----------------------------[public functions]----------------------------*/

.extern Os_Isr

.extern exception_IVOR0
.extern exception_IVOR1
.extern exception_IVOR2
.extern exception_IVOR3
//.extern exception_IVOR4
.extern exception_IVOR5
.extern exception_IVOR6
.extern exception_IVOR7
.extern exception_IVOR8
.extern exception_IVOR9
//.extern exception_IVOR10
.extern exception_IVOR11
.extern exception_IVOR12
.extern exception_IVOR13
.extern exception_IVOR14

.global exception_IVOR4
.global exception_IVOR10
.global Os_ArchSwapContextTo
.global Os_ArchSwapContext
.global Os_ArchSetSpAndCall
.global Os_ArchGetStackPtr
.global Os_Test_And_Set

ASM_SECTION_TEXT(.text)


Os_ArchGetStackPtr:
	mr r3,r1
	blr


Os_ArchSetSpAndCall:
		mr r1,r3
		mtlr r4
		blr

/**
 * void Os_ArchSwapContext(pcb_t *old, pcb_t *new )
 *
 * Saves a function context on current stack, pops a new one from new context
 *
 * r3 - pcb for old task
 * r4 - pcb for new task
 *
 */
Os_ArchSwapContext:
	stwu 	sp,-FUNC_FRM_SIZE(sp)
	mflr 	r0
	stw		r0,FUNC_FRM_LR(sp)
	mfcr	r0
	stw		r0,FUNC_FRM_CR(sp)
	
	/* Save context indicator */
	li		r0,FUNC_PATTERN
	stw		r0,FUNC_FRM_PATTERN(sp)

#if defined(CFG_SPE)
	evstdd		r14, FUNC_FRM_R14(sp)
	evstdd		r15, FUNC_FRM_R15(sp)
	evstdd		r16, FUNC_FRM_R16(sp)
	evstdd		r17, FUNC_FRM_R17(sp)
	evstdd		r18, FUNC_FRM_R18(sp)
	evstdd		r19, FUNC_FRM_R19(sp)
	evstdd		r20, FUNC_FRM_R20(sp)
	evstdd		r21, FUNC_FRM_R21(sp)
	evstdd		r22, FUNC_FRM_R22(sp)
	evstdd		r23, FUNC_FRM_R23(sp)
	evstdd		r24, FUNC_FRM_R24(sp)
	evstdd		r25, FUNC_FRM_R25(sp)
	evstdd		r26, FUNC_FRM_R26(sp)
	evstdd		r27, FUNC_FRM_R27(sp)
	evstdd		r28, FUNC_FRM_R28(sp)
	evstdd		r29, FUNC_FRM_R29(sp)
	evstdd		r30, FUNC_FRM_R30(sp)
	evstdd		r31, FUNC_FRM_R31(sp)

#else
	/* Save registers preserved by function call */
	stw		r14, FUNC_FRM_R14(sp)
	stw		r15, FUNC_FRM_R15(sp)
	stw		r16, FUNC_FRM_R16(sp)
	stw		r17, FUNC_FRM_R17(sp)
	stw		r18, FUNC_FRM_R18(sp)
	stw		r19, FUNC_FRM_R19(sp)
	stw		r20, FUNC_FRM_R20(sp)
	stw		r21, FUNC_FRM_R21(sp)
	stw		r22, FUNC_FRM_R22(sp)
	stw		r23, FUNC_FRM_R23(sp)
	stw		r24, FUNC_FRM_R24(sp)
	stw		r25, FUNC_FRM_R25(sp)
	stw		r26, FUNC_FRM_R26(sp)
	stw		r27, FUNC_FRM_R27(sp)
	stw		r28, FUNC_FRM_R28(sp)
	stw		r29, FUNC_FRM_R29(sp)
	stw		r30, FUNC_FRM_R30(sp)
	stw		r31, FUNC_FRM_R31(sp)
#endif

	/* Save stack ptr... */
	stw		sp,PCB_STACK_CURR_P(r3)

	/* TODO: Call Os_PretaskHook()? */ 
	
	/* 	Flow down  */
	
/**
 * void Os_ArchSwapContextTo( NULL, pcb_t *new )
 * r3 - always NULL
 * r4 - The pcb to switch to.
 */ 	
Os_ArchSwapContextTo:
	/* Get stack for new task */
	lwz		sp,PCB_STACK_CURR_P(r4)

	/* Set new current task */
	LOAD_ADDR_32(3,Os_Sys)
	stw		r4,SYS_CURR_PCB_P(r3)

	/* Restore C context */
	lwz     r0,FUNC_FRM_CR(sp)
    mtcr    r0
    lwz     r0,FUNC_FRM_LR (sp)
    mtlr    r0

	/* Get the context type */
	lwz		r0, FUNC_FRM_PATTERN(sp)
	cmplwi	r0, FUNC_PATTERN
	beq+	restoreFuncContext
	cmplwi	r0,ISR_PATTERN
	beq+ 	restoreIsrContext
	li 		r3, OS_ERR_BAD_CONTEXT
	b		Os_ArchPanic

restoreFuncContext:
#if defined(CFG_SPE)
	evldd	r14, FUNC_FRM_R14(sp)
	evldd	r15, FUNC_FRM_R15(sp)
	evldd	r16, FUNC_FRM_R16(sp)
	evldd	r17, FUNC_FRM_R17(sp)
	evldd	r18, FUNC_FRM_R18(sp)
	evldd	r19, FUNC_FRM_R19(sp)
	evldd	r20, FUNC_FRM_R20(sp)
	evldd	r21, FUNC_FRM_R21(sp)
	evldd	r22, FUNC_FRM_R22(sp)
	evldd	r23, FUNC_FRM_R23(sp)
	evldd	r24, FUNC_FRM_R24(sp)
	evldd	r25, FUNC_FRM_R25(sp)
	evldd	r26, FUNC_FRM_R26(sp)
	evldd	r27, FUNC_FRM_R27(sp)
	evldd	r28, FUNC_FRM_R28(sp)
	evldd	r29, FUNC_FRM_R29(sp)
	evldd	r30, FUNC_FRM_R30(sp)
	evldd	r31, FUNC_FRM_R31(sp)
	addi 	sp,sp,(FUNC_FRM_SIZE)
#else 
	lwz		r14, FUNC_FRM_R14(sp)
	lwz		r15, FUNC_FRM_R15(sp)
	lwz		r16, FUNC_FRM_R16(sp)
	lwz		r17, FUNC_FRM_R17(sp)
	lwz		r18, FUNC_FRM_R18(sp)
	lwz		r19, FUNC_FRM_R19(sp)
	lwz		r20, FUNC_FRM_R20(sp)
	lwz		r21, FUNC_FRM_R21(sp)
	lwz		r22, FUNC_FRM_R22(sp)
	lwz		r23, FUNC_FRM_R23(sp)
	lwz		r24, FUNC_FRM_R24(sp)
	lwz		r25, FUNC_FRM_R25(sp)
	lwz		r26, FUNC_FRM_R26(sp)
	lwz		r27, FUNC_FRM_R27(sp)
	lwz		r28, FUNC_FRM_R28(sp)
	lwz		r29, FUNC_FRM_R29(sp)
	lwz		r30, FUNC_FRM_R30(sp)
	lwz		r31, FUNC_FRM_R31(sp)
	addi 	sp,sp,(FUNC_FRM_SIZE)
#endif	
	/* TODO: Call Os_PosttaskHook()? */
	
	blr


/**
 * External input exception handlers 
 */ 
 #if 0
 #if defined(CFG_MPC5668)
 		.global exception_IVOR2
		.balign 16
exception_IVOR2:
	/* Push register r8 and r9 on stack */
    stwu  	r8,-8(sp)
    stw   	r9,4(sp)
    
	/* Check for ECC problems */
	//Store err reg
	LOAD_ADDR_32(r8,ECSM_BASE)
	lbz  r9,ECSM_ESR(r8)
	LOAD_ADDR_32(r8,EccErrReg)
	stw		r9,0(r8)
	// Jump to next instruction
	mfspr 	r9,srr0
	addi  	r9,r9,4
	mtspr	srr0,r9
	
	/* Pop r8 and r9 */
	lwz     r8,0(sp)
    lwz     r9,4(sp)
    addi  	sp,sp,8
    
	rfi	
#endif
#endif

		.global exception_IVOR4
		.global restoreIsrContext
		.balign 16
exception_IVOR4:

	/* Save the exception frame */
	stwu	sp,-EXC_FRM_SIZE(sp)

	stw  	r3,EXC_FRM_R3(sp)

	mfsrr0 	r3
	stw 	r3, EXC_FRM_SRR0(sp)
	mfsrr1 	r3
	stw 	r3, EXC_FRM_SRR1(sp)

	mfcr 	r3
	stw 	r3, EXC_FRM_CR(sp)	
	mfxer 	r3 
	stw 	r3, EXC_FRM_XER(sp)
	mfctr 	r3
	stw 	r3, EXC_FRM_CTR(sp)
	mflr 	r3
	stw 	r3, EXC_FRM_LR(sp)	
	
	li		r3,4
	stw 	r3, EXC_FRM_VECTOR(sp)
#if defined(CFG_SPE)	

	/* Enable SPE (exceptions turns it off) */
	mfmsr		r3
    oris   		r3,r3,0x0200
	mtmsr 		r3
	isync

	/* Create the frame */
	addi 	sp,sp,-ISR_FRM_SIZE
	evstdd		r3, ISR_FRM_R3(sp)		/* Save work reg */	
	
	/* SPEFSCR	*/
	mfspr		r3,SPR_SPEFSCR
	clrlwi		r3,r3,24	 			/* Mask off non-status bits */
	stw			r3,ISR_FRM_SPE_FSCR(sp)

	/* Save SPE acc  */
	evsubfw 	r3,r3,r3				/* zero r3 */
	evaddumiaaw r3,r3					/* Add r3 = r3 + acc -> r3 = acc */
	evstdd 		r3,ISR_FRM_SPE_ACC(r1)
	
	evstdd		r0, ISR_FRM_R0(sp)
	evstdd		r4, ISR_FRM_R4(sp)
	evstdd		r5, ISR_FRM_R5(sp)
	evstdd		r6, ISR_FRM_R6(sp)
	evstdd		r7, ISR_FRM_R7(sp)
	evstdd		r8, ISR_FRM_R8(sp)
	evstdd		r9, ISR_FRM_R9(sp)
	evstdd		r10, ISR_FRM_R10(sp)
	evstdd		r11, ISR_FRM_R11(sp)
	evstdd		r12, ISR_FRM_R12(sp)
	evstdd		r14, ISR_FRM_R14(sp)
	evstdd		r15, ISR_FRM_R15(sp)
	evstdd		r16, ISR_FRM_R16(sp)
	evstdd		r17, ISR_FRM_R17(sp)
	evstdd		r18, ISR_FRM_R18(sp)
	evstdd		r19, ISR_FRM_R19(sp)
	evstdd		r20, ISR_FRM_R20(sp)
	evstdd		r21, ISR_FRM_R21(sp)
	evstdd		r22, ISR_FRM_R22(sp)
	evstdd		r23, ISR_FRM_R23(sp)
	evstdd		r24, ISR_FRM_R24(sp)
	evstdd		r25, ISR_FRM_R25(sp)
	evstdd		r26, ISR_FRM_R26(sp)
	evstdd		r27, ISR_FRM_R27(sp)
	evstdd		r28, ISR_FRM_R28(sp)
	evstdd		r29, ISR_FRM_R29(sp)
	evstdd		r30, ISR_FRM_R30(sp)
	addi		sp,sp,8
	evstdd		r31, (ISR_FRM_R31-8)(sp)
	addi		sp,sp,-8
#else
	/* Save the ISR frame */
	addi 	sp,sp,-ISR_FRM_SIZE
	stw		r0, ISR_FRM_R0(sp)
	stw		r4, ISR_FRM_R4(sp)
	stw		r5, ISR_FRM_R5(sp)
	stw		r6, ISR_FRM_R6(sp)
	stw		r7, ISR_FRM_R7(sp)
	stw		r8, ISR_FRM_R8(sp)
	stw		r9, ISR_FRM_R9(sp)
	stw		r10, ISR_FRM_R10(sp)
	stw		r11, ISR_FRM_R11(sp)
	stw		r12, ISR_FRM_R12(sp)
	stw		r14, ISR_FRM_R14(sp)
	stw		r15, ISR_FRM_R15(sp)
	stw		r16, ISR_FRM_R16(sp)
	stw		r17, ISR_FRM_R17(sp)
	stw		r18, ISR_FRM_R18(sp)
	stw		r19, ISR_FRM_R19(sp)
	stw		r20, ISR_FRM_R20(sp)
	stw		r21, ISR_FRM_R21(sp)
	stw		r22, ISR_FRM_R22(sp)
	stw		r23, ISR_FRM_R23(sp)
	stw		r24, ISR_FRM_R24(sp)
	stw		r25, ISR_FRM_R25(sp)
	stw		r26, ISR_FRM_R26(sp)
	stw		r27, ISR_FRM_R27(sp)
	stw		r28, ISR_FRM_R28(sp)
	stw		r29, ISR_FRM_R29(sp)
	stw		r30, ISR_FRM_R30(sp)
	stw		r31, ISR_FRM_R31(sp)
#endif
	
	li 		r3,ISR_PATTERN
	stw		r3,ISR_FRM_PATTERN(sp)
	/* Save the stack so it later can be saved in the pcb */	
	mr		r4,sp			
	
	/* Switch to interrupt stack if at depth 0 */
	/* Load the value Os_Sys.int_nest_cnt */
	LOAD_IND_32(r3,(Os_Sys+SYS_INT_NEST_CNT))
	cmplwi	r3,0
	bne		on_int_stack

	/* Load the interrupt stack */
	LOAD_IND_32(r1,(Os_Sys+SYS_INT_STACK))

on_int_stack:

#if defined(CFG_MPC5516)|| defined(CFG_MPC5668) 
	lis r6, INTC_IACKR_PRC0@ha
	lwz r6, INTC_IACKR_PRC0@l(r6)
#elif defined(CFG_MPC5554) || defined(CFG_MPC5567)  || defined(CFG_MPC560X) || defined(CFG_MPC563XM)
	lis r6, INTC_IACKR@ha 
	lwz r6, INTC_IACKR@l(r6)
#else
#error No CPU selected	
#endif
	/* Check for 0 entry */
	mr		r5,r6
#if 0	
	cmplwi 	r5,0
	bne+	vectorOk
	/* The entry was 0, call panic */
	li 		r3,OS_ERR_SPURIOUS_INTERRUPT
	li 		r4, 0
	mr		r5,r1
	b 		Os_ArchPanic	
#endif	
	
vectorOk:
    /* extract vector */
	extrwi  r5,r5,9,21
	/* Check for soft INT */
	cmplwi 	r5,7
	bgt		noSoftInt
	/* Clear soft interrupt */
	li		r0,1
	LOAD_ADDR_32(3,INTC_SSCIR0)
	stbx	r0,r5,r3			
	
noSoftInt:	
	LOAD_ADDR_32(3,Os_Isr)
    mtlr  r3
	mr    r3,r4  		/* "old" stack as arg1 */
	mr	 r4,r5          /* Vector as arg2 */
    blrl		 		/* Call the entry */

	/* Notes!
	 * The OS interrupt is ACK'd in Os_Isr(). For ISR1 it needs to call Irq_EOI()
	 */
	 
	/* Irq_Entry have returned the stack we shall use */
	mr 		sp,r3

	/* Restore */
restoreIsrContext:
#if defined(CFG_SPE) 

	// Restore SPE control/status reg.
	lwz		r3,ISR_FRM_SPE_FSCR(sp)
	mtspr	SPR_CSRR0,r3

	/* Restore SPE acc */
	evldd r3,ISR_FRM_SPE_ACC(r1)
	evmra r3,r3
	

	evldd	r0, ISR_FRM_R0(sp)
	evldd	r3, ISR_FRM_R4(sp)
	evldd	r4, ISR_FRM_R4(sp)
	evldd	r5, ISR_FRM_R5(sp)
	evldd	r6, ISR_FRM_R6(sp)
	evldd	r7, ISR_FRM_R7(sp)
	evldd	r8, ISR_FRM_R8(sp)
	evldd	r9, ISR_FRM_R9(sp)
	evldd	r10, ISR_FRM_R10(sp)
	evldd	r11, ISR_FRM_R11(sp)
	evldd	r12, ISR_FRM_R12(sp)
	evldd	r14, ISR_FRM_R14(sp)
	evldd	r15, ISR_FRM_R15(sp)
	evldd	r16, ISR_FRM_R16(sp)
	evldd	r17, ISR_FRM_R17(sp)
	evldd	r18, ISR_FRM_R18(sp)
	evldd	r19, ISR_FRM_R19(sp)
	evldd	r20, ISR_FRM_R20(sp)
	evldd	r21, ISR_FRM_R21(sp)
	evldd	r22, ISR_FRM_R22(sp)
	evldd	r23, ISR_FRM_R23(sp)
	evldd	r24, ISR_FRM_R24(sp)
	evldd	r25, ISR_FRM_R25(sp)
	evldd	r26, ISR_FRM_R26(sp)
	evldd	r27, ISR_FRM_R27(sp)
	evldd	r28, ISR_FRM_R28(sp)
	evldd	r29, ISR_FRM_R29(sp)
	evldd	r30, ISR_FRM_R30(sp)
	addi	sp,sp,8
	evldd	r31, (ISR_FRM_R31-8)(sp)
	addi	sp,sp,-8
#else
	lwz		r0, ISR_FRM_R0(sp)
	lwz		r4, ISR_FRM_R4(sp)
	lwz		r5, ISR_FRM_R5(sp)
	lwz		r6, ISR_FRM_R6(sp)
	lwz		r7, ISR_FRM_R7(sp)
	lwz		r8, ISR_FRM_R8(sp)
	lwz		r9, ISR_FRM_R9(sp)
	lwz		r10, ISR_FRM_R10(sp)
	lwz		r11, ISR_FRM_R11(sp)
	lwz		r12, ISR_FRM_R12(sp)
	lwz		r14, ISR_FRM_R14(sp)
	lwz		r15, ISR_FRM_R15(sp)
	lwz		r16, ISR_FRM_R16(sp)
	lwz		r17, ISR_FRM_R17(sp)
	lwz		r18, ISR_FRM_R18(sp)
	lwz		r19, ISR_FRM_R19(sp)
	lwz		r20, ISR_FRM_R20(sp)
	lwz		r21, ISR_FRM_R21(sp)
	lwz		r22, ISR_FRM_R22(sp)
	lwz		r23, ISR_FRM_R23(sp)
	lwz		r24, ISR_FRM_R24(sp)
	lwz		r25, ISR_FRM_R25(sp)
	lwz		r26, ISR_FRM_R26(sp)
	lwz		r27, ISR_FRM_R27(sp)
	lwz		r28, ISR_FRM_R28(sp)
	lwz		r29, ISR_FRM_R29(sp)
	lwz		r30, ISR_FRM_R30(sp)
	lwz		r31, ISR_FRM_R31(sp)
#endif	
	
	/* back to the exception frame */
	addi 	sp,sp,ISR_FRM_SIZE
	
	lwz 	r3, EXC_FRM_LR(sp)
	mtlr 	r3
	lwz	 	r3, EXC_FRM_CTR(sp)
	mtctr 	r3
	lwz 	r3, EXC_FRM_XER(sp)
	mtxer 	r3
	lwz 	r3, EXC_FRM_CR(sp)
	mtcr	r3
	lwz 	r3, EXC_FRM_SRR0(sp)
	mtsrr0 	r3
	lwz 	r3, EXC_FRM_SRR1(sp)
	mtsrr1 	r3
	lwz 	r3, EXC_FRM_R3(sp)
	addi	sp,sp,EXC_FRM_SIZE
	rfi



/**
 * Decrementer exception. It just triggers soft interrupt 7.
 *
 */
exception_IVOR10:
    stwu  	r3,-8(sp)
    stw   	r4,4(sp)

    /* ack dec int */
    lis 	r3,0x0800
    mtspr   SPR_TSR,r3

    /* Set soft int */
    li  	r4,2
    lis     r3, INTC_SSCIR7@ha
    stb     r4, INTC_SSCIR7@l(r3)

    lwz     r3,0(sp)
    lwz     r4,4(sp)
    addi  	sp,sp,8
    rfi




