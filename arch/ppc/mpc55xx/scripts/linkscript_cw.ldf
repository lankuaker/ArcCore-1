/*
 * Elf Information
 *
 * Small data sections
 *  There are 3 small data sections addressed from different 
 *  offsets, address 0x0000_0000 , r2 or r13 
 *
 * 
 * Register       Symbol          Sections          Size 
 *---------------------------------------------------------  
 *   r2           _SDA2_BASE_     .sdata2,  sbss2   64K 
 *   r13          _SDA_BASE_      .sdata, . sbss    64K
 *  addr 0x0       N/A            .sdata0, .sbss0   64K
 * 
 *
 * SHT_PROGBITS - initialized read/write data
 * SHT_NOBITS  - Zero initialized data. 
 *
 *
 * .sdata2  - SHT_PROGBITS 
 * .sbss2   - SHT_NOBITS + SHF_WRITE
 * .sdata   - SHT_PROGBITS + SHF_WRITE
 * .sbss    - SHT_NOBITS + SHF_WRITE
 *
 * Since .sdata2 and .sbss2 must be grouped together. .sbss2 must be able to write data
 * and .sdata2 is read only. That leaves us with a copy from ROM to RAM.
 */ 


MEMORY
{
#if defined(CFG_MPC5604B) || defined(CFG_MPC5604P)
    flash: org = 0x00000000,   len = 0x00080000 
#elif defined (CFG_MPC5602B)
	flash: org = 0x00000000,   len = 0x00040000 
#elif defined(CFG_MPC5607B) || defined(CFG_MPC5634M)
    flash: org = 0x00000000,   len = 0x00180000 
#else
    flash: org = 0x00000000,   len = 0x00100000 
#endif
#if defined(CFG_MPC5606B)    
    sram:  org = 0x40000000,   len = 0x00014000 
#elif defined(CFG_MPC5607B)    
    sram:  org = 0x40000000,   len = 0x00018000 
#elif defined(CFG_MPC5604P)    
    sram:  org = 0x40000000,   len = 0x0000a000 
#elif defined(CFG_MPC5634M)    
    sram:  org = 0x40000000,   len = 0x00017800 
#elif defined (CFG_MPC5602B)
    sram:  org = 0x40000000,   len = 0x00006000 
#else
    sram:  org = 0x40000000,   len = 0x0000c000 
#endif
}

SECTIONS
{
   GROUP : {
       __rom_start=.; 
      .rcw : { }      
      .exception_tbl (VLECODE) : {}
#if defined(CFG_VLE)
       .text_vle (VLECODE) ALIGN(0x1000): {
             *(.text)
             *(.text_vle)
             *(.fini)
             *(.eini)
         }
       .init  : {}
       .init_vle (VLECODE) : {
             *(.init)
             *(.init_vle)
          }
        .ctors : {}
        .dtors : {}
        .rodata (CONST) : {
            *(.rdata)
            *(.rodata)
         }
#else       
      .text : { 
      		 *(.exception_tbl)
             *(.text)
             *(.rodata)
             *(.ctors)
             *(.dtors)    
             *(.init) 
             *(.fini) 		
             *(.eini)
             . = (.+15);
        }
#endif
	    extab      : {}  
	    extabindex : {}

		. = ALIGN(0x10);
#if defined(CFG_MPC5604B)	
		__LP_TEXT_ROM = .;
		.=.+SIZEOF(.lowpower_text);
#endif		
	    . = ALIGN(0x10);   	
	    __DATA_ROM = .;
	    .=.+SIZEOF(.data);
	    __SDATA = .;
	    .=.+SIZEOF(.sdata);
	    __SDATA2 = .;
	    .=.+SIZEOF(.sdata2);
	    __SBSS = .;
	    .=.+SIZEOF(.sbss);
	    __SDATA0 = .;
	    .=.+SIZEOF(.PPC.EMB.sdata0);
	    __rom_end = .;
#if defined(CFG_MPC5516)	    
		.lowpower_text BIND(0x000ff000): {
			*(.lowpower_text)
		}
		
		.lowpower_vector BIND(0x000ffffc): {
		    *(.lowpower_vector)
		}
#endif

	 }	 > flash


	GROUP : {
		__ram_start=.;
		
#if defined(CFG_MPC5604B)
		__LP_TEXT_START = .;
		.lowpower_text (VLECODE) LOAD(ROMADDR(__LP_TEXT_ROM)) :  {}
		__LP_TEXT_END = .;	    
#endif				
		. = ALIGN(0x10);
		__DATA_RAM = .;
		.data (DATA) LOAD(ROMADDR(__DATA_ROM)) :  {}
		.sdata (DATA) LOAD(ROMADDR(__SDATA)): {}
		__DATA_END = . ;
	
		__BSS_START = .;
		.sbss (DATA) : {}
		.bss    : {}  
		__BSS_END = .;
		
		. = ALIGN(0x10);
		__SDATA2_RAM = .;		
		.sdata2 LOAD(ROMADDR(__SDATA2)) : {}		
		__SDATA2_END = .;
		
		. = ALIGN(0x10);
		__SBSS2_START = .;
	    .sbss2 : {}    /* writable, init to 0 */
	    __SBSS2_END = .; 
		
		.PPC.EMB.sdata0 LOAD(ADDR(__SDATA0)) : {}	/* Small data with offset to 0 */	    
		.PPC.EMB.sbss0  : {}
		.ram_no_init : {
			*(.ram_no_init_data) *(.ram_no_init_bss)
		    *(.ramlog_data) *(.ramlog_bss) *(.dem_eventmemory_pri)
		}		
		.ram_no_cache  : { 
		    *(.ram_no_cache_data) *(.ram_no_cache_bss)
		}

		_heap_addr = .; 
		__ram_end = .;
	} > sram
}   

_heap_end   = ADDR(sram)+SIZEOF(sram);
_heap_size  = _heap_end - _heap_addr;
__SP_INIT = _heap_end;
