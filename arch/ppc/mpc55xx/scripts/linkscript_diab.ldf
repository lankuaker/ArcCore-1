
MEMORY
{
	#include "memory.ldf"
}

SECTIONS
{
	GROUP : {
		.rcw : {}
#if defined(CFG_VLE)		
		.text_vle (TEXT)	: {
			*(.text_vle)
			*(.vletext)
			*(.rdata)
			*(.rodata)
			*(.j_class_table)
			*(.init)
			*(.fini)
			*(.exception_tbl)
		}
#else		
		.text (TEXT)	: {
			*(.text)
			*(.rdata)
			*(.rodata)
			*(.j_class_table)
			*(.init)
			*(.fini)
			*(.exception_tbl)
		}
#endif

		.frame_info(=TEXT) : {}
		/* constructor and destructor function ptrs                 */
		.ctors ALIGN(4) : { ctordtor.o(.ctors) *(.ctors) }
		.dtors ALIGN(4) : { ctordtor.o(.dtors) *(.dtors) }

		.sdata2 (=TEXT)	: {}   /* small CONST area for some targets */
		__DATA_ROM = .;
	    .=.+SIZEOF(.data);
	    __SDATA = .;
	    .=.+SIZEOF(.sdata);
	    __SDATA0 = .;
	} > flash

#if defined(CFG_MPC5516)
	GROUP 0x000ff000 : {
		.McuE_LowPowerRecoverFlash : {
		    *(.lowpower_text)
		}
	} > flash
	
	GROUP 0x000ffffc : {
		.lowpower_vector : {
	    	*(.lowpower_vector)
		}
	} > flash
#endif	


	GROUP : {
		/* Take all code from all non-vle objects and libraries. */

		.text (TEXT)	: {
			*(.text)
		}
	} > flash

	/* The third GROUP allocates space for the initialized data and
	 * uninitialized data in the "ram" section.
	 */

	GROUP : {
		__DATA_RAM	= .;
		.data (DATA) LOAD(__DATA_ROM)	: {}		
		.sdata (DATA) LOAD(__SDATA)	: {}
		__DATA_END	= .;

		/* Allocate uninitialized sections.			    */

		__BSS_START	= .;
		.sbss (BSS)	: {}
		.bss  (BSS)	: {}
		.tibss (BSS)	: {}
		__BSS_END	= .;

		.ramlog (DATA) : { *(.ramlog) }
		/* Any remaining space will be used as a heap.		    */

		.calibration : {}  

		.PPC.EMB.sdata0 (DATA) (OPTIONAL) : { }
		
		.ram_no_init (=NOLOAD) ALIGN(0x10) : {
		    *(.ramlog .dem_eventmemory_pri)
		}
		
		.ram_no_cache (=NOLOAD) ALIGN(0x10) : {
		    *(.t32_outport .winidea_port)
		}
		
		_heap_start = .;
	} > ram

}

__SP_INIT	= ADDR(ram)+SIZEOF(ram);
__SP_END	= __SP_INIT-1000;
__HEAP_END	= __SP_END;		    /* Heap contiguous with stack.  */
__SP_INIT_Z0 = __HEAP_END+256;

/* Some targets use an extra underscore in front of identifiers
 * ------------------------------------------------------------------------ */
 _heap_end = ADDR(ram) + SIZEOF(ram);
__HEAP_START	= _heap_start;
//___HEAP_END	= __HEAP_END;
___SP_INIT	= __SP_INIT;
___SP_END	= __SP_END;
___DATA_ROM	= __DATA_ROM;
___DATA_RAM	= __DATA_RAM;
___DATA_END	= __DATA_END;
___BSS_START	= __BSS_START;
___BSS_END	= __BSS_END;
