

#define _ASSEMBLER_

#define PPAGE	  0x30   /* bank nr. reg              */
#define MCFLG     0x67   /* modulus counter flag reg  */
#define TFLG1     0x4e   /* timer interrupt flags     */

#define TFLG1_7   0x80
#define TFLG1_6   0x40
#define TFLG1_5   0x20
#define TFLG1_4   0x10
#define TFLG1_3   0x08
#define TFLG1_2   0x04
#define TFLG1_1   0x02
#define TFLG1_0   0x01

#include "asm_offset.h"

#include "context.sx"
#include "context.h"
#include "irq_defines.h"

#if defined(__IAR_SYSTEMS_ICC__)
DECLARE_IRQ_MAP_GLOBAL	MACRO	//  name
	PUBLIC irq_\1
	ENDM
 
DECLARE_IRQ_MAP	MACRO	//name, nr
irq_\1:
	movb	#\2,-2,sp      // save irq nr. above context space
	SAVE_CONTEXT_FROM_INTERRUPT
	ldaa	#0						// load irq nr. as arg 0..
	ldab	-1,sp					// ..from above context space
	tfr		sp,y					// put SP as arg 1
	call	.LWRD.(Irq_Entry),.BYT3.(Irq_Entry)
	tfr		y,sp					// load stack_p returned from Irq_Entry
	RESTORE_CONTEXT_FOR_INTERRUPT
	rti
	ENDM

DECLARE_IRQ_TIMER_MAP	MACRO	//name, nr, intflag
irq_\1:
	movb	#\2,-2,sp	// save irq nr. above context space
	bset	TFLG1,#\3	// clear timer interrupt flag
	SAVE_CONTEXT_FROM_INTERRUPT
	ldaa	#0						// load irq nr. as arg 0..
	ldab	-1,sp					// ..from above context space
	tfr		sp,y					// put SP as arg 1
	call	.LWRD.(Irq_Entry),.BYT3.(Irq_Entry)
	tfr		y,sp					// load stack_p returned from Irq_Entry
	RESTORE_CONTEXT_FOR_INTERRUPT
	rti
	ENDM

DECLARE_IRQ_MODULUS_COUNTER_MAP MACRO
irq_mccnt_underflow:
	movb	#IRQ_NR_MCCNT_UNDERFLOW, -2, sp	// save irq nr. above context space
	bset	MCFLG, #0x80						// clear interrupt flag
	SAVE_CONTEXT_FROM_INTERRUPT
	ldaa	#0						// load irq nr. as arg 0..
	ldab	-1,sp					// ..from above context space
	tfr		sp,y					// put SP as arg 1
	call	.LWRD.(Irq_Entry),.BYT3.(Irq_Entry)
	tfr		y,sp					// load stack_p returned from Irq_Entry
	RESTORE_CONTEXT_FOR_INTERRUPT
	rti
	ENDM

	module	?arch_irq
	RSEG   CODE:CODE

	EXTERN Irq_Entry
	
#else
/* 
 * Macros used to create the IRQ mapping table
 */

.macro DECLARE_IRQ_MAP_GLOBAL name
.global irq_\name
.endm
 
.macro DECLARE_IRQ_MAP name nr
irq_\name:
	movb	#\nr, -10, sp      // save irq nr. above context space
	bra		Irq_PreEntry
.endm

.macro DECLARE_IRQ_TIMER_MAP name, nr, intflag
irq_\name:
	movb	#\nr, -10, sp      // save irq nr. above context space
	bset	TFLG1, #\intflag   // clear timer interrupt flag
	bra		Irq_PreEntry
.endm

.macro DECLARE_IRQ_MODULUS_COUNTER_MAP
irq_mccnt_underflow:
	movb	#IRQ_NR_MCCNT_UNDERFLOW, -10, sp	// save irq nr. above context space
	bset	MCFLG, #0x80						// clear interrupt flag
	bra		Irq_PreEntry
.endm

.section .text

/*
 * Save context, prepare args, call Irq_Entry, restore context (if we are returning to same task)
 */
Irq_PreEntry:
	SAVE_CONTEXT_FROM_INTERRUPT
	ldaa	#0						// load irq nr. as arg 0..
	ldab	-1,sp					// ..from above context space
	sts		2,-sp					// put SP as arg 1
	call	Irq_Entry				//
	tfr		d,sp					// load stack_p returned from Irq_Entry
	RESTORE_CONTEXT_FOR_INTERRUPT
	rti

#endif

/*
 * Make all isr-map entries global
 */
 
	DECLARE_IRQ_MAP_GLOBAL res0
	DECLARE_IRQ_MAP_GLOBAL res1
	DECLARE_IRQ_MAP_GLOBAL res2
	DECLARE_IRQ_MAP_GLOBAL res3
	DECLARE_IRQ_MAP_GLOBAL res4
	DECLARE_IRQ_MAP_GLOBAL res5
	DECLARE_IRQ_MAP_GLOBAL pwm_shutdown
	DECLARE_IRQ_MAP_GLOBAL ptpif
	DECLARE_IRQ_MAP_GLOBAL can4_tx
	DECLARE_IRQ_MAP_GLOBAL can4_rx
	DECLARE_IRQ_MAP_GLOBAL can4_err
	DECLARE_IRQ_MAP_GLOBAL can4_wake
	DECLARE_IRQ_MAP_GLOBAL can3_tx
	DECLARE_IRQ_MAP_GLOBAL can3_rx
	DECLARE_IRQ_MAP_GLOBAL can3_err
	DECLARE_IRQ_MAP_GLOBAL can3_wake
	DECLARE_IRQ_MAP_GLOBAL can2_tx
	DECLARE_IRQ_MAP_GLOBAL can2_rx
	DECLARE_IRQ_MAP_GLOBAL can2_err
	DECLARE_IRQ_MAP_GLOBAL can2_wake
	DECLARE_IRQ_MAP_GLOBAL can1_tx
	DECLARE_IRQ_MAP_GLOBAL can1_rx
	DECLARE_IRQ_MAP_GLOBAL can1_err
	DECLARE_IRQ_MAP_GLOBAL can1_wake
	DECLARE_IRQ_MAP_GLOBAL can0_tx
	DECLARE_IRQ_MAP_GLOBAL can0_rx
	DECLARE_IRQ_MAP_GLOBAL can0_err
	DECLARE_IRQ_MAP_GLOBAL can0_wake
	DECLARE_IRQ_MAP_GLOBAL flash
	DECLARE_IRQ_MAP_GLOBAL eeprom
	DECLARE_IRQ_MAP_GLOBAL spi2
	DECLARE_IRQ_MAP_GLOBAL spi1
	DECLARE_IRQ_MAP_GLOBAL iic
	DECLARE_IRQ_MAP_GLOBAL bdlc
	DECLARE_IRQ_MAP_GLOBAL selfclk_mode
	DECLARE_IRQ_MAP_GLOBAL pll_lock
	DECLARE_IRQ_MAP_GLOBAL accb_overflow
	DECLARE_IRQ_MAP_GLOBAL mccnt_underflow
	DECLARE_IRQ_MAP_GLOBAL pthif
	DECLARE_IRQ_MAP_GLOBAL ptjif
	DECLARE_IRQ_MAP_GLOBAL atd1
	DECLARE_IRQ_MAP_GLOBAL atd0
	DECLARE_IRQ_MAP_GLOBAL sci1
	DECLARE_IRQ_MAP_GLOBAL sci0
	DECLARE_IRQ_MAP_GLOBAL spi0
	DECLARE_IRQ_MAP_GLOBAL acca_input
	DECLARE_IRQ_MAP_GLOBAL acca_overflow
	DECLARE_IRQ_MAP_GLOBAL timer_overflow
	DECLARE_IRQ_MAP_GLOBAL tc7
	DECLARE_IRQ_MAP_GLOBAL tc6
	DECLARE_IRQ_MAP_GLOBAL tc5
	DECLARE_IRQ_MAP_GLOBAL tc4
	DECLARE_IRQ_MAP_GLOBAL tc3
	DECLARE_IRQ_MAP_GLOBAL tc2
	DECLARE_IRQ_MAP_GLOBAL tc1
	DECLARE_IRQ_MAP_GLOBAL tc0
	DECLARE_IRQ_MAP_GLOBAL rtii
	DECLARE_IRQ_MAP_GLOBAL irq
	DECLARE_IRQ_MAP_GLOBAL xirq
	DECLARE_IRQ_MAP_GLOBAL swi
	DECLARE_IRQ_MAP_GLOBAL illegal
	DECLARE_IRQ_MAP_GLOBAL cop_fail
	DECLARE_IRQ_MAP_GLOBAL cop_clock

/*
 * Irq map stubs. Used for catching irq number and resetting interrupt flag
 */
	DECLARE_IRQ_MAP res0, IRQ_NR_RES0
	DECLARE_IRQ_MAP res1, IRQ_NR_RES1
	DECLARE_IRQ_MAP res2, IRQ_NR_RES2
	DECLARE_IRQ_MAP res3, IRQ_NR_RES3
	DECLARE_IRQ_MAP res4, IRQ_NR_RES4
	DECLARE_IRQ_MAP res5, IRQ_NR_RES5
	DECLARE_IRQ_MAP pwm_shutdown, IRQ_NR_PWM_SHUTDOWN
	DECLARE_IRQ_MAP ptpif, IRQ_NR_PTPIF
	DECLARE_IRQ_MAP can4_tx, IRQ_NR_CAN4_TX
	DECLARE_IRQ_MAP can4_rx, IRQ_NR_CAN4_RX
	DECLARE_IRQ_MAP can4_err, IRQ_NR_CAN4_ERR
	DECLARE_IRQ_MAP can4_wake, IRQ_NR_CAN4_WAKE
	DECLARE_IRQ_MAP can3_tx, IRQ_NR_CAN3_TX
	DECLARE_IRQ_MAP can3_rx, IRQ_NR_CAN3_RX
	DECLARE_IRQ_MAP can3_err, IRQ_NR_CAN3_ERR
	DECLARE_IRQ_MAP can3_wake, IRQ_NR_CAN3_WAKE
	DECLARE_IRQ_MAP can2_tx, IRQ_NR_CAN2_TX
	DECLARE_IRQ_MAP can2_rx, IRQ_NR_CAN2_RX
	DECLARE_IRQ_MAP can2_err, IRQ_NR_CAN2_ERR
	DECLARE_IRQ_MAP can2_wake, IRQ_NR_CAN2_WAKE
	DECLARE_IRQ_MAP can1_tx, IRQ_NR_CAN1_TX
	DECLARE_IRQ_MAP can1_rx, IRQ_NR_CAN1_RX
	DECLARE_IRQ_MAP can1_err, IRQ_NR_CAN1_ERR
	DECLARE_IRQ_MAP can1_wake, IRQ_NR_CAN1_WAKE
	DECLARE_IRQ_MAP can0_tx, IRQ_NR_CAN0_TX
	DECLARE_IRQ_MAP can0_rx, IRQ_NR_CAN0_RX
	DECLARE_IRQ_MAP can0_err, IRQ_NR_CAN0_ERR
	DECLARE_IRQ_MAP can0_wake, IRQ_NR_CAN0_WAKE
	DECLARE_IRQ_MAP flash, IRQ_NR_FLASH
	DECLARE_IRQ_MAP eeprom, IRQ_NR_EEPROM
	DECLARE_IRQ_MAP spi2, IRQ_NR_SPI2
	DECLARE_IRQ_MAP spi1, IRQ_NR_SPI1
	DECLARE_IRQ_MAP iic, IRQ_NR_IIC
	DECLARE_IRQ_MAP bdlc, IRQ_NR_BDLC
	DECLARE_IRQ_MAP selfclk_mode, IRQ_NR_SELFCLK_MODE
	DECLARE_IRQ_MAP pll_lock, IRQ_NR_PLL_LOCK
	DECLARE_IRQ_MAP accb_overflow, IRQ_NR_ACCB_OVERFLOW
	
	// Modulus counter irq map stub
	DECLARE_IRQ_MODULUS_COUNTER_MAP
	
	DECLARE_IRQ_MAP pthif, IRQ_NR_PTHIF
	DECLARE_IRQ_MAP ptjif, IRQ_NR_PTJIF
	DECLARE_IRQ_MAP atd1, IRQ_NR_ATD1
	DECLARE_IRQ_MAP atd0, IRQ_NR_ATD0
	DECLARE_IRQ_MAP sci1, IRQ_NR_SCI1
	DECLARE_IRQ_MAP sci0, IRQ_NR_SCI0
	DECLARE_IRQ_MAP spi0, IRQ_NR_SPI0
	DECLARE_IRQ_MAP acca_input, IRQ_NR_ACCA_INPUT
	DECLARE_IRQ_MAP acca_overflow, IRQ_NR_ACCA_OVERFLOW
	DECLARE_IRQ_MAP timer_overflow, IRQ_NR_TIMER_OVERFLOW
	
	// Gpt timer irq map stubs
	DECLARE_IRQ_TIMER_MAP tc7, IRQ_NR_TC7, TFLG1_7
	DECLARE_IRQ_TIMER_MAP tc6, IRQ_NR_TC6, TFLG1_6
	DECLARE_IRQ_TIMER_MAP tc5, IRQ_NR_TC5, TFLG1_5
	DECLARE_IRQ_TIMER_MAP tc4, IRQ_NR_TC4, TFLG1_4
	DECLARE_IRQ_TIMER_MAP tc3, IRQ_NR_TC3, TFLG1_3
	DECLARE_IRQ_TIMER_MAP tc2, IRQ_NR_TC2, TFLG1_2
	DECLARE_IRQ_TIMER_MAP tc1, IRQ_NR_TC1, TFLG1_1
	DECLARE_IRQ_TIMER_MAP tc0, IRQ_NR_TC0, TFLG1_0
	
	DECLARE_IRQ_MAP rtii, IRQ_NR_RTII
	DECLARE_IRQ_MAP irq, IRQ_NR_IRQ
	DECLARE_IRQ_MAP xirq, IRQ_NR_XIRQ
	DECLARE_IRQ_MAP swi, IRQ_NR_SWI
	DECLARE_IRQ_MAP illegal, IRQ_NR_ILLEGAL
	DECLARE_IRQ_MAP cop_fail, IRQ_NR_COP_FAIL
	DECLARE_IRQ_MAP cop_clock, IRQ_NR_COP_CLOCK

	END
