/* -------------------------------- Arctic Core ------------------------------
 * Arctic Core - the open source AUTOSAR platform http://arccore.com
 *
 * Copyright (C) 2009  ArcCore AB <contact@arccore.com>
 *
 * This source code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation; See <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 * -------------------------------- Arctic Core ------------------------------*/

#define _ASSEMBLER_
//#include "kernel_offset.h"
#include "asm_offset.h"
#include "stack.h"

.extern Os_Sys

	.syntax unified
	.cpu cortex-r4
	.fpu softvfp
	.thumb

	.section .text

 	.global Irq_Handler
    .type	Irq_Handler, %function
    
	.global Svc_Handler
    .type	Svc_Handler, %function    

	.global Data_Exc_Handler
    .type	Data_Exc_Handler, %function
    
    .global Prefetch_Exc_Handler
    .type	Prefetch_Exc_Handler, %function
    
    .global Dummy_Irq
    .type	Dummy_Irq, %function        


// Registers part of context.
#define REG_SAVE r0-r12


// A data exception handler. This let us put a breakpoint and return to the place where the exception was caught.
// If DEBUG_EXCEPTIONS is off then just use the ordinary dummy irq.
Data_Exc_Handler: 
#ifdef CFG_ARM_CR4_DEBUG_EXCEPTIONS
	// Setup return address. This requires subtraction from LR.
	sub		lr, lr, #8
	
	// Store return stuff on system mode's stack
	srsdb	sp!, #31 // 31 = System mode
	
	// Switch to system mode.
	cpsid 	i, #31  // 31 = system mode
	
	// Return using stuff from stack.
    rfeia	sp!
#else
	b 		Dummy_Irq
#endif

// A prefetch exception handler. This let us put a breakpoint and return to the place where the exception was caught.
// If DEBUG_EXCEPTIONS is off then just use the ordinary dummy irq.
Prefetch_Exc_Handler: 
#ifdef CFG_ARM_CR4_DEBUG_EXCEPTIONS	

	// Switch to system mode.
	cpsid 	i, #31  // 31 = system mode
	
	// Setup return address. This requires subtraction from LR.
	sub		lr, lr, #4
	
	// Return to the place before the instruction that caused the interrupt.
    MOVS  PC, LR
    
#else
	b 		Dummy_Irq
#endif


Irq_Handler:
	// Setup return address. This requires subtraction from LR.
	sub		lr, lr, #4

Svc_Handler:
	// Store return stuff on system mode's stack
	srsdb	sp!, #31 // 31 = System mode
	
	// Switch to system mode.
	cpsid 	i, #31  // 31 = system mode 
    
    // Push registers on stack
	push    {REG_SAVE,lr}
	
    sub.w   sp,sp,#C_SIZE
    mov.w   r4,#LC_PATTERN
    str     r4,[sp,#C_CONTEXT_OFFS]
    
    // Put stack as first arg to Irq_Entry    
    mov 	r0,sp			
    
	// When at interrupt nest count = 0, load interrupt stack    
	ldr      r4,=Os_Sys
	ldr      r5,[r4,#SYS_INT_NEST_CNT]
	cmp      r5, #0
	bgt      arggg
	ldr      sp,[r4,#SYS_INT_STACK]   
      
arggg:  
    bl      Irq_Entry
    mov     sp, r0			// pop from returned stack

	/* Do a normal exception return */
    add.w   sp,sp,#C_SIZE
    
    // Restore registers
    pop     {REG_SAVE,lr}
    
    // Return using stuff from stack.
    rfeia	sp!
	
/**
 * Fake an interrupt stack to be able to return to thread mode.
 *
 * Arm stack look like:
 *   xPSR
 *    PC
 *    LR
 *    r12
 *    r3
 *    r2
 *    r1
 *    r0
 *
 * Don't really know what bits matter on the xPSR here. Not setting
 * the EPSR[T] is really bad since it will generate a INVSTATE exception.
 */
 	.global Irq_EOI2
 	.type	Irq_EOI2, %function

Irq_EOI2:
	mov.w	r1,0x01000000	/* EPSR[T] bit */
	mov		r0,lr
	push 	{r0,r1}			/* Push PC and xPSR */
	sub.w sp,sp,#(6*4)		/* r0,r1,r2,r3, r12,lr,pc,xPSR */
	mov.w	lr,#0xfffffff9	/* interrupt return with stack=MSR */
	bx 		lr				/* do return */


/**
 * Os_ArchSetSpAndCall
 *
 * @param sp Pointer to the stack
 * @param f  Pointer to the function to call
 */

 	.global Os_ArchSetSpAndCall
 	.type	Os_ArchSetSpAndCall, %function
Os_ArchSetSpAndCall:
	mov.w	sp,r0
	mov.w	lr,r1
	bx		lr

/**
 * Os_ArchSwapContext
 *
 * @param r0 - pcb for old task
 * @param r1 - pcb for new task
 *
 * -------------- higher addr
 * r4-r8,etc
 * -------
 * 4 - Large or Small context indicator
 * 0 - ?
 * ----------
 *
 */
 	.global Os_ArchSwapContext
 	.type	Os_ArchSwapContext, %function
Os_ArchSwapContext:
	// Save function call registers
    push    {REG_SAVE,lr}

	// Store the context frame
    sub.w   sp,sp,#C_SIZE

	// Save small-context indicator
    mov.w   r4,#SC_PATTERN
    str     r4,[sp,#C_CONTEXT_OFFS]
	// ---> We have saved NVGPR+C

    // store old stack for old task
    mov.w	r4,sp
    str     r4,[r0,#PCB_STACK_CURR_P]

	// Flow down
	// R1 - new PCB
	.global Os_ArchSwapContextTo
	.type	Os_ArchSwapContextTo, %function
Os_ArchSwapContextTo:

    // Get stack for new task
    ldr 	r2,[r1,#PCB_STACK_CURR_P]
    mov.w 	sp,r2
    
	// Set new current pcb
    ldr     r5,= Os_Sys
    str     r1,[r5,#SYS_CURR_PCB_P]

	// Restore C context
    ldr     r6,[sp,#C_CONTEXT_OFFS]
    cmp     r6,#SC_PATTERN
    beq     os_sc_restore
    cmp     r6,#LC_PATTERN
    beq     os_lc_restore
    
os_stack_problem:
// TODO: Jump to error handler
    b os_stack_problem


/* Restore the small context. Cases:
 *  - "Normal" context switch between processes.
 *  - We are in handler mode (this task preemted another task in interrupt
 *    context). We need to terminate handler mode ( set to LR=0xffff_fff9 )
 *    and
 */
os_sc_restore:
    add.w   sp,sp,#C_SIZE
    pop     {REG_SAVE,lr}
    bx      lr


/* Restore the large context. Cases:
 *  1. Directly from Irq_Handler()
 *    (the preempted task got swapped in directly)
 *  2. The preempted task, got preemted by a task and
 *    we have already returned from handler mode.
 *
 * NOTE ! Only case 2 is covered here, case 1 is handled in Irq_Handler
 *        prologue
 */
 
os_lc_restore:
	/* Do a normal exception return */
    add.w   sp,sp,#C_SIZE
    
    // Restore registers
    pop     {REG_SAVE,lr}
    
   	/* Enable interrupts */
    //cpsie	i    			

	// Return using stuff from stack.
    rfeia	sp!

    
/* Interrupt routine used to catch unused interrupts and exceptions */
Dummy_Irq:
	/* Go back to sys mode for easier debugging.
	 Save link register*/
	mov   r3, lr
	/* We don't want to use the IRQ mode
	   so swich back to sys mode. */
	mov   r2,		#0xDF
    msr   cpsr_c,   r2
    /* Restore link register again */
    mov   lr, r3
	b Dummy_Irq
