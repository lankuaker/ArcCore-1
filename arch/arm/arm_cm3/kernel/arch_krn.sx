
/*
 *  Copyright ArcCore AB
 *
 *
 */

#define _ASSEMBLER_
#include "asm_offset.h"
#include "arch_offset.h"
#include "arch_stack.h"

.extern Os_Sys
.extern TailChaining

	.syntax unified
	.cpu cortex-m3
	.fpu softvfp
	.thumb

	.section .text

 	.global Irq_Handler
    .type	Irq_Handler, %function
 	.global SVC_Handler
    .type	SVC_Handler, %function
 	.global PendSV_Handler
    .type	PendSV_Handler, %function

#define IRQ_ENABLE() 		cpsie 	i
#define IRQ_DISABLE()		cpsid 	i

#define SCB_ICSR 		0xE000ED04
#define ICSR_VECTACTIVE	0x1ff


// lr
#define REG_SAVE r4-r8,r10,r11

SVC_Handler: 
    add     sp,sp,#(8*4)    /* remove one interrupt frame from the stack */
    bx      lr              /* return to the preempted task */

PendSV_Handler:
    IRQ_DISABLE()
    push    {REG_SAVE,lr}
    sub.w   sp,sp,#C_SIZE
    mov.w   r4,#LC_PATTERN
    str     r4,[sp,#C_CONTEXT_OFFS]    
    mov 	r2,sp			// stack as first arg

	mov     r1,#0x01000000  // make up a task xPSR that has only the T bit set 
	ldr     r0,=TailChaining   // load the address of scheduler wrapper (new PC) 
	push    {r0-r1}         // push xPSR,PC 
	sub     sp,sp,#(5*4)    // don't care for lr,r12,r3,r2,r1
    push    {r2}            // stack as first arg
 	bx      lr              // interrupt return to the scheduler wrapper
 
Irq_Handler:        
    push    {REG_SAVE,lr}
    sub.w   sp,sp,#C_SIZE
    mov.w   r4,#LC_PATTERN
    str     r4,[sp,#C_CONTEXT_OFFS]    
    mov 	r6,sp			// save stack for later..

    // When at interrupt nest count = 0, load interrupt stack    
	ldr      r4,=Os_Sys
	ldr      r5,[r4,#SYS_INT_NEST_CNT]
	cmp      r5, #0
	bgt      arggg  
	ldr      sp,[r4,#SYS_INT_STACK]         
arggg:  

	IRQ_DISABLE()
	ldr 	r4,=SCB_ICSR
	ldr     r3, [r4, #0]
	ldr     r4,=ICSR_VECTACTIVE
	and.w   r0,r3,r4  				/* Pass vector as arg */
	bl      Os_Isr_cm3
	IRQ_ENABLE()

    mov     sp, r6			// pop from returned stack

	/* Do a normal exception return */
    add.w   sp,sp,#C_SIZE
    pop     {REG_SAVE,lr}
    bx 		lr	
	
/**
 * Fake an interrupt stack to be able to return to thread mode.
 *
 * Arm stack look like:
 *   xPSR
 *    PC
 *    LR
 *    r12
 *    r3
 *    r2
 *    r1
 *    r0
 *
 * Don't really know what bits matter on the xPSR here. Not setting
 * the EPSR[T] is really bad since it will generate a INVSTATE exception.
 */
 	.global Irq_EOI2
 	.type	Irq_EOI2, %function

Irq_EOI2:
	mov.w	r1,0x01000000	/* EPSR[T] bit */
	mov		r0,lr
	push 	{r0,r1}			/* Push PC and xPSR */
	sub.w sp,sp,#(6*4)		/* r0,r1,r2,r3, r12,lr,pc,xPSR */
	mov.w	lr,#0xfffffff9	/* interrupt return with stack=MSR */
	bx 		lr				/* do return */


/**
 * Os_ArchSetSpAndCall
 *
 * @param sp Pointer to the stack
 * @param f  Pointer to the function to call
 */

 	.global Os_ArchSetSpAndCall
 	.type	Os_ArchSetSpAndCall, %function
Os_ArchSetSpAndCall:
	mov.w	sp,r0
	mov.w	lr,r1
	bx		lr

/**
 * Os_ArchSwapContext
 *
 * @param r0 - pcb for old task
 * @param r1 - pcb for new task
 *
 * -------------- higher addr
 * r4-r8,etc
 * -------
 * 4 - Large or Small context indicator
 * 0 - ?
 * ----------
 *
 */
 	.global Os_ArchSwapContext
 	.type	Os_ArchSwapContext, %function
Os_ArchSwapContext:
	// Save function call registers
    push    {REG_SAVE,lr}

	// Store the context frame
    sub.w   sp,sp,#C_SIZE

	// Save small-context indicator
    mov.w   r4,#SC_PATTERN
    str     r4,[sp,#C_CONTEXT_OFFS]
	// ---> We have saved NVGPR+C

    // store old stack for old task
    mov.w	r4,sp
    str     r4,[r0,#PCB_STACK_CURR_P]

	// Flow down
	// R1 - new PCB
	.global Os_ArchSwapContextTo
	.type	Os_ArchSwapContextTo, %function
Os_ArchSwapContextTo:

    // Get stack for new task
    ldr 	r2,[r1,#PCB_STACK_CURR_P]
//    msr		msp,r2
    mov.w 	sp,r2
    

// TODO: Fix this for all arch's..call pre,post hooks. Done here or after?
// Set new current pcb
    ldr     r5,= Os_Sys
    str     r1,[r5,#SYS_CURR_PCB_P]

// Restore C context
    ldr     r6,[sp,#C_CONTEXT_OFFS]
    cmp     r6,#SC_PATTERN
    beq     os_sc_restore
    cmp     r6,#LC_PATTERN
    beq     os_lc_restore
os_stack_problem:
// TODO: Jump to error handler
    b os_stack_problem


	/* Restore the small context. Cases:
	 *  - "Normal" context switch between processes.
	 *  - We are in handler mode (this task preemted another task in interrupt
	 *    context). We need to terminate handler mode ( set to LR=0xffff_fff9 )
	 *    and
	 */
os_sc_restore:
    add.w   sp,sp,#C_SIZE
    pop     {REG_SAVE,lr}
    bx      lr


/* Restore the large context. Cases:
 *  1. Directly from Irq_Handler()
 *    (the preempted task got swapped in directly)
 *  2. The preempted task, got preemted by a task and
 *    we have already returned from handler mode.
 *
 * NOTE ! Only case 2 is covered here, case 1 is handled in Irq_Handler
 *        prologue
 */
 
os_lc_restore:
    add.w   sp,sp,#C_SIZE
    /* Pop function stack (LR will be 0xffff_fff9 here, just ignore */
    pop     {REG_SAVE,lr}
    IRQ_ENABLE()       /* Enable interrupts to allow svc */
    svc 0              /* cause exception to return to the preempted task */


    

